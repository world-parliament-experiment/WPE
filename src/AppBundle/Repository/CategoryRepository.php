<?php

namespace AppBundle\Repository;

use AppBundle\Entity\Category;
use AppBundle\Entity\Delegation;
use AppBundle\Entity\User;
use AppBundle\Enum\InitiativeEnum;
use Doctrine\ORM\AbstractQuery;
use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Query\Expr\Join;


/**
 * CategoryRepository
 *
 * This class was generated by the PhpStorm "Php Annotations" Plugin. Add your own custom
 * repository methods below.
 */
class CategoryRepository extends EntityRepository
{

    public function getCategoryOverview($type)
    {

        $type = InitiativeEnum::checkTypeName($type);

        if ($type !== false) {

            $qb = $this->createQueryBuilder('category')
                ->select('category.id, category.name, category.type, category.description, category.country, category.slug')
                ->addSelect('COUNT(initiative.id) count_initiative')
                ->addSelect('MAX(initiative.createdAt) last_initiative')
                ->leftJoin('category.initiatives', 'initiative', Join::WITH, 'category.id = initiative.category AND initiative.type = :type AND initiative.state = :state')
                ->setParameter('type', $type)
                ->addOrderBy('category.type')
                ->groupBy('category.id');

            if ($type === InitiativeEnum::TYPE_PAST ||
                $type === InitiativeEnum::TYPE_PROGRAM
            ) {
                $qb->setParameter('state', InitiativeEnum::STATE_FINISHED);
            } else {
                $qb->setParameter('state', InitiativeEnum::STATE_ACTIVE);
            }

            return $qb
                ->getQuery()
                ->execute();

        }
    }
    public function getFutureInitiatives()
    {
        return $this->createQueryBuilder('category')
            ->select(['category', 'initiative'])
            ->leftJoin('category.initiatives', 'initiative')
            ->andWhere('initiative.type = 0')
            ->andWhere('initiative.state > 0')
            ->andWhere('initiative.state < 3')
            ->addOrderBy('category.name')
            ->getQuery()
            ->execute();
    }

    public function getCurrentInitiatives()
    {
        return $this->createQueryBuilder('category')
            ->select(['category', 'initiative'])
            ->leftJoin('category.initiatives', 'initiative')
            ->andWhere('initiative.type = 1')
            ->andWhere('initiative.state > 0')
            ->andWhere('initiative.state < 3')
            ->addOrderBy('category.name')
            ->getQuery()
            ->execute();
    }

    public function getPastInitiatives()
    {
        return $this->createQueryBuilder('category')
            ->select(['category', 'initiative'])
            ->leftJoin('category.initiatives', 'initiative')
            ->andWhere('initiative.type = 2')
            ->andWhere('initiative.state = 2')
//            ->andWhere('initiative.state > 1')
//            ->andWhere('initiative.state < 4')
            ->addOrderBy('category.name')
            ->getQuery()
            ->execute();
    }

    public function getProgramInitiatives()
    {



        return $this->createQueryBuilder('category')

            ->select(['category', 'initiative'])
            ->leftJoin('category.initiatives', 'initiative')
            ->andWhere('initiative.type = 3')
//            ->andWhere('initiative.state > 1')
//            ->andWhere('initiative.state < 4')
            ->andWhere('initiative.state = 2')

            ->addOrderBy('category.name')
            ->getQuery()
            ->execute();
    }

  /**
     * All initiatives by category and type
     *
     * @return mixed
     */
    public function getInitiatives($category, $type)
    {
        return $this->createQueryBuilder('category')
        ->select(['category', 'initiative'])
        ->leftJoin('category.initiatives', 'initiative')
        ->andWhere('initiative.category = :icategory')
        ->andWhere('initiative.type = :itype')
        ->setParameters([
            'icategory' => $category,
            'itype' => $type,
        ])
        ->getQuery()
        ->execute();
    }

}
